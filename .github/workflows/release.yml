name: CI

on:
  release:
    types:
      - published
  workflow_dispatch:

env:
  VERSION: ${{ github.event_name == 'release' && github.event.release.tag_name || github.ref_name }}
  UPDATE_VERSION: ${{ github.event_name == 'release' && 'true' || 'false' }}

jobs:
  update-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    outputs:
      version: ${{ env.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.BUMP_VERSION_TOKEN_ACTION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Update version files
        run: |
          PYPROJECT_FILE="pyproject.toml"
          INIT_FILE="src/nemorosa/__init__.py"

          # Update version in pyproject.toml
          sed -i "s/^version = \".*\"/version = \"${{ env.VERSION }}\"/" "$PYPROJECT_FILE"

          # Update version in __init__.py
          sed -i "s/^__version__ = \".*\"/__version__ = \"${{ env.VERSION }}\"/" "$INIT_FILE"

          # Regenerate uv.lock to update the package version
          uv lock

      - name: Update CHANGELOG
        uses: stefanzweifel/changelog-updater-action@v1
        with:
          release-notes: ${{ github.event.release.body }}
          latest-version: ${{ env.VERSION }}

      - name: Commit and push version update
        env:
          PAT_TOKEN: ${{ secrets.BUMP_VERSION_TOKEN_ACTION }}
        run: |
          git checkout main  # Ensure we're on main branch
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml uv.lock CHANGELOG.md src/nemorosa/__init__.py
          git commit -m "chore: bump version to ${{ env.VERSION }}"
          git push origin main

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: [update-version]
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: main # Checkout the latest main branch (after update-version push)
          fetch-depth: 0 # Ensures we get all history for tag retrieval and pushing

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            docker.io/${{ github.repository }}
            ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [update-version]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: main # Checkout the latest main branch (after update-version push)
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install

      - name: Install dependencies
        run: uv sync

      - name: Build package
        run: uv build

      - name: Publish to PyPI
        run: uv publish
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
